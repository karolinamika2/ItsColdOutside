{"version":3,"sources":["components/ViewWeather/ViewWeather.js","components/SearchCity/SearchCity.js","App.js","serviceWorker.js","index.js"],"names":["ViewWeather","console","log","this","props","failed","className","loaded","data","name","coord","lat","lon","main","temp","temp_min","temp_max","humidity","pressure","wind","speed","React","Component","SearchCity","state","loading","onSearchCityCallback","callback","onSearchFailedCallback","failedcallback","onSearchCity","bind","event","preventDefault","setState","link","refs","city_name","value","axios","get","then","res","catch","err","waiting","onSubmit","ref","placeholder","App","meta","onSearchFailed","onDataReceived","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f19d80e9.chunk.js","sourcesContent":["import React from 'react';\n\nclass ViewWeather extends React.Component {\n    render() { \n      console.log('redraw view', this.props)\n      return this.props.failed ?\n        <div className=\"alert alert-danger\">No city with that name!</div> :\n        this.props.loaded ?\n          (<div className=\"card\">\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{this.props.data.name}</h4>\n                <p>Coords: {this.props.data.coord.lat} {this.props.data.coord.lon}</p>\n                <p>Temperature: {this.props.data.main.temp}</p>\n                <p>Temperature min.: {this.props.data.main.temp_min}</p>\n                <p>Temperature max.: {this.props.data.main.temp_max}</p>\n                <p>Humidity: {this.props.data.main.humidity}</p>\n                <p>Pressure: {this.props.data.main.pressure}</p>\n                <p>Wind: {this.props.data.wind.speed}</p>\n            </div>\n          </div>) :\n          ' ';\n    }\n  }\n  export default ViewWeather;","import React from 'react';\nimport axios from 'axios';\n\nclass SearchCity extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n          loading: false\n      }\n      this.onSearchCityCallback = props.callback;\n      this.onSearchFailedCallback = props.failedcallback;\n      this.onSearchCity = this.onSearchCity.bind(this);\n    }\n  \n    onSearchCity(event) {\n      event.preventDefault();\n      this.setState({loading: true});\n      const city = this.refs.city_name.value;\n      const link = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + '&appid=05508bb378ad891b493b0c886cca7a57' + '&units=metric';\n      console.log(link);\n  \n      axios.get(link)\n        .then(res => {\n          const data = res.data;\n          console.log(data);\n          \n          this.onSearchCityCallback(data);\n          this.setState({loading: false});\n        })\n        .catch(err => {\n          console.log(err)\n  \n          this.onSearchFailedCallback();\n          this.setState({loading: false});\n        });\n    }\n  \n    render() {\n      console.log('redraw show')\n      const waiting= (this.state.loading)? <p>Waiting...</p> : \" \";\n      return <div>\n        <form onSubmit={this.onSearchCity}>\n          <input className=\"form-control mb-3\" ref='city_name' placeholder='City'/>\n          <button className=\"btn btn-danger mb-3\">Show</button>\n          {waiting}\n        </form>\n      </div>\n    }\n  }\n  export default SearchCity;","import React from 'react';\nimport ViewWeather from './components/ViewWeather/ViewWeather';\nimport SearchCity from './components/SearchCity/SearchCity';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      meta: {},\n      loaded: false,\n      failed: false\n    };\n    this.onSearchFailed = this.onSearchFailed.bind(this);\n    this.onDataReceived = this.onDataReceived.bind(this);\n  }\n\n  onSearchFailed() {\n    this.setState({failed: true});\n\n    console.log('search failed', this.state.meta, this.state.loaded)\n  }\n\n  onDataReceived(props) {\n    this.setState({failed: false, meta: props, loaded: true});\n    console.log('data received', this.state.meta, this.state.loaded)\n  }\n\n  render () {\n    console.log('redraw parent')\n\n    return (\n      <div className=\"App\">\n        <div className=\"container h-100\">\n          <div className=\"d-flex justify-content-center h-100\">\n            <div className=\"panel\">\n              <SearchCity callback={this.onDataReceived} failedcallback={this.onSearchFailed}/>\n              <ViewWeather data={this.state.meta} loaded={this.state.loaded} failed={this.state.failed}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}